/*
 * Password manager
 *
 * A simple manager for storing your passwords
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"ApiV1PasswordsGet",
			strings.ToUpper("Get"),
			"/api/v1/passwords",
			c.ApiV1PasswordsGet,
		},
		{
			"ApiV1PasswordsIdDelete",
			strings.ToUpper("Delete"),
			"/api/v1/passwords/{id}",
			c.ApiV1PasswordsIdDelete,
		},
		{
			"ApiV1PasswordsIdGet",
			strings.ToUpper("Get"),
			"/api/v1/passwords/{id}",
			c.ApiV1PasswordsIdGet,
		},
		{
			"ApiV1PasswordsIdPut",
			strings.ToUpper("Put"),
			"/api/v1/passwords/{id}",
			c.ApiV1PasswordsIdPut,
		},
		{
			"ApiV1PasswordsPost",
			strings.ToUpper("Post"),
			"/api/v1/passwords",
			c.ApiV1PasswordsPost,
		},
	}
}

// ApiV1PasswordsGet -
func (c *DefaultApiController) ApiV1PasswordsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1PasswordsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ApiV1PasswordsIdDelete -
func (c *DefaultApiController) ApiV1PasswordsIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.ApiV1PasswordsIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ApiV1PasswordsIdGet -
func (c *DefaultApiController) ApiV1PasswordsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.ApiV1PasswordsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ApiV1PasswordsIdPut -
func (c *DefaultApiController) ApiV1PasswordsIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt32Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	passwordParam := Password{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPasswordRequired(passwordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1PasswordsIdPut(r.Context(), idParam, passwordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ApiV1PasswordsPost -
func (c *DefaultApiController) ApiV1PasswordsPost(w http.ResponseWriter, r *http.Request) {
	passwordParam := Password{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPasswordRequired(passwordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1PasswordsPost(r.Context(), passwordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
